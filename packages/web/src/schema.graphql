# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"mutation root"
type mutation_root {
    "delete data from the table: \"question\""
    delete_question(
        "filter the rows which have to be deleted"
        where: question_bool_exp!
    ): question_mutation_response
    "delete single row from the table: \"question\""
    delete_question_by_pk(id: bigint!): question
    "delete data from the table: \"question_tag\""
    delete_question_tag(
        "filter the rows which have to be deleted"
        where: question_tag_bool_exp!
    ): question_tag_mutation_response
    "delete single row from the table: \"question_tag\""
    delete_question_tag_by_pk(question_id: Int!, tag_id: Int!): question_tag
    "delete data from the table: \"tag\""
    delete_tag(
        "filter the rows which have to be deleted"
        where: tag_bool_exp!
    ): tag_mutation_response
    "delete single row from the table: \"tag\""
    delete_tag_by_pk(id: Int!): tag
    "delete data from the table: \"test\""
    delete_test(
        "filter the rows which have to be deleted"
        where: test_bool_exp!
    ): test_mutation_response
    "delete single row from the table: \"test\""
    delete_test_by_pk(id: Int!): test
    "delete data from the table: \"user\""
    delete_user(
        "filter the rows which have to be deleted"
        where: user_bool_exp!
    ): user_mutation_response
    "delete single row from the table: \"user\""
    delete_user_by_pk(id: Int!): user
    "insert data into the table: \"question\""
    insert_question(
        "the rows to be inserted"
        objects: [question_insert_input!]!,
        "on conflict condition"
        on_conflict: question_on_conflict
    ): question_mutation_response
    "insert a single row into the table: \"question\""
    insert_question_one(
        "the row to be inserted"
        object: question_insert_input!,
        "on conflict condition"
        on_conflict: question_on_conflict
    ): question
    "insert data into the table: \"question_tag\""
    insert_question_tag(
        "the rows to be inserted"
        objects: [question_tag_insert_input!]!,
        "on conflict condition"
        on_conflict: question_tag_on_conflict
    ): question_tag_mutation_response
    "insert a single row into the table: \"question_tag\""
    insert_question_tag_one(
        "the row to be inserted"
        object: question_tag_insert_input!,
        "on conflict condition"
        on_conflict: question_tag_on_conflict
    ): question_tag
    "insert data into the table: \"tag\""
    insert_tag(
        "the rows to be inserted"
        objects: [tag_insert_input!]!,
        "on conflict condition"
        on_conflict: tag_on_conflict
    ): tag_mutation_response
    "insert a single row into the table: \"tag\""
    insert_tag_one(
        "the row to be inserted"
        object: tag_insert_input!,
        "on conflict condition"
        on_conflict: tag_on_conflict
    ): tag
    "insert data into the table: \"test\""
    insert_test(
        "the rows to be inserted"
        objects: [test_insert_input!]!,
        "on conflict condition"
        on_conflict: test_on_conflict
    ): test_mutation_response
    "insert a single row into the table: \"test\""
    insert_test_one(
        "the row to be inserted"
        object: test_insert_input!,
        "on conflict condition"
        on_conflict: test_on_conflict
    ): test
    "insert data into the table: \"user\""
    insert_user(
        "the rows to be inserted"
        objects: [user_insert_input!]!,
        "on conflict condition"
        on_conflict: user_on_conflict
    ): user_mutation_response
    "insert a single row into the table: \"user\""
    insert_user_one(
        "the row to be inserted"
        object: user_insert_input!,
        "on conflict condition"
        on_conflict: user_on_conflict
    ): user
    "update data of the table: \"question\""
    update_question(
        "increments the integer columns with given value of the filtered values"
        _inc: question_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: question_set_input,
        "filter the rows which have to be updated"
        where: question_bool_exp!
    ): question_mutation_response
    "update single row of the table: \"question\""
    update_question_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: question_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: question_set_input,
        pk_columns: question_pk_columns_input!
    ): question
    "update data of the table: \"question_tag\""
    update_question_tag(
        "increments the integer columns with given value of the filtered values"
        _inc: question_tag_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: question_tag_set_input,
        "filter the rows which have to be updated"
        where: question_tag_bool_exp!
    ): question_tag_mutation_response
    "update single row of the table: \"question_tag\""
    update_question_tag_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: question_tag_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: question_tag_set_input,
        pk_columns: question_tag_pk_columns_input!
    ): question_tag
    "update data of the table: \"tag\""
    update_tag(
        "increments the integer columns with given value of the filtered values"
        _inc: tag_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: tag_set_input,
        "filter the rows which have to be updated"
        where: tag_bool_exp!
    ): tag_mutation_response
    "update single row of the table: \"tag\""
    update_tag_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: tag_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: tag_set_input,
        pk_columns: tag_pk_columns_input!
    ): tag
    "update data of the table: \"test\""
    update_test(
        "increments the integer columns with given value of the filtered values"
        _inc: test_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: test_set_input,
        "filter the rows which have to be updated"
        where: test_bool_exp!
    ): test_mutation_response
    "update single row of the table: \"test\""
    update_test_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: test_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: test_set_input,
        pk_columns: test_pk_columns_input!
    ): test
    "update data of the table: \"user\""
    update_user(
        "increments the integer columns with given value of the filtered values"
        _inc: user_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: user_set_input,
        "filter the rows which have to be updated"
        where: user_bool_exp!
    ): user_mutation_response
    "update single row of the table: \"user\""
    update_user_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: user_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: user_set_input,
        pk_columns: user_pk_columns_input!
    ): user
}

"query root"
type query_root {
    "fetch data from the table: \"question\""
    question(
        "distinct select on columns"
        distinct_on: [question_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_order_by!],
        "filter the rows returned"
        where: question_bool_exp
    ): [question!]!
    "fetch aggregated fields from the table: \"question\""
    question_aggregate(
        "distinct select on columns"
        distinct_on: [question_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_order_by!],
        "filter the rows returned"
        where: question_bool_exp
    ): question_aggregate!
    "fetch data from the table: \"question\" using primary key columns"
    question_by_pk(id: bigint!): question
    "fetch data from the table: \"question_tag\""
    question_tag(
        "distinct select on columns"
        distinct_on: [question_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_tag_order_by!],
        "filter the rows returned"
        where: question_tag_bool_exp
    ): [question_tag!]!
    "fetch aggregated fields from the table: \"question_tag\""
    question_tag_aggregate(
        "distinct select on columns"
        distinct_on: [question_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_tag_order_by!],
        "filter the rows returned"
        where: question_tag_bool_exp
    ): question_tag_aggregate!
    "fetch data from the table: \"question_tag\" using primary key columns"
    question_tag_by_pk(question_id: Int!, tag_id: Int!): question_tag
    "fetch data from the table: \"tag\""
    tag(
        "distinct select on columns"
        distinct_on: [tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [tag_order_by!],
        "filter the rows returned"
        where: tag_bool_exp
    ): [tag!]!
    "fetch aggregated fields from the table: \"tag\""
    tag_aggregate(
        "distinct select on columns"
        distinct_on: [tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [tag_order_by!],
        "filter the rows returned"
        where: tag_bool_exp
    ): tag_aggregate!
    "fetch data from the table: \"tag\" using primary key columns"
    tag_by_pk(id: Int!): tag
    "fetch data from the table: \"test\""
    test(
        "distinct select on columns"
        distinct_on: [test_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [test_order_by!],
        "filter the rows returned"
        where: test_bool_exp
    ): [test!]!
    "fetch aggregated fields from the table: \"test\""
    test_aggregate(
        "distinct select on columns"
        distinct_on: [test_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [test_order_by!],
        "filter the rows returned"
        where: test_bool_exp
    ): test_aggregate!
    "fetch data from the table: \"test\" using primary key columns"
    test_by_pk(id: Int!): test
    "fetch data from the table: \"user\""
    user(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
    "fetch aggregated fields from the table: \"user\""
    user_aggregate(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): user_aggregate!
    "fetch data from the table: \"user\" using primary key columns"
    user_by_pk(id: Int!): user
}

"columns and relationships of \"question\""
type question {
    content: String
    id: bigint!
    "An array relationship"
    question_tags(
        "distinct select on columns"
        distinct_on: [question_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_tag_order_by!],
        "filter the rows returned"
        where: question_tag_bool_exp
    ): [question_tag!]!
    "An aggregated array relationship"
    question_tags_aggregate(
        "distinct select on columns"
        distinct_on: [question_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_tag_order_by!],
        "filter the rows returned"
        where: question_tag_bool_exp
    ): question_tag_aggregate!
    title: String
}

"aggregated selection of \"question\""
type question_aggregate {
    aggregate: question_aggregate_fields
    nodes: [question!]!
}

"aggregate fields of \"question\""
type question_aggregate_fields {
    avg: question_avg_fields
    count(columns: [question_select_column!], distinct: Boolean): Int
    max: question_max_fields
    min: question_min_fields
    stddev: question_stddev_fields
    stddev_pop: question_stddev_pop_fields
    stddev_samp: question_stddev_samp_fields
    sum: question_sum_fields
    var_pop: question_var_pop_fields
    var_samp: question_var_samp_fields
    variance: question_variance_fields
}

"aggregate avg on columns"
type question_avg_fields {
    id: Float
}

"aggregate max on columns"
type question_max_fields {
    content: String
    id: bigint
    title: String
}

"aggregate min on columns"
type question_min_fields {
    content: String
    id: bigint
    title: String
}

"response of any mutation on the table \"question\""
type question_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [question!]!
}

"aggregate stddev on columns"
type question_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type question_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type question_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type question_sum_fields {
    id: bigint
}

"columns and relationships of \"question_tag\""
type question_tag {
    "An object relationship"
    question: question!
    question_id: Int!
    "An object relationship"
    tag: tag!
    tag_id: Int!
}

"aggregated selection of \"question_tag\""
type question_tag_aggregate {
    aggregate: question_tag_aggregate_fields
    nodes: [question_tag!]!
}

"aggregate fields of \"question_tag\""
type question_tag_aggregate_fields {
    avg: question_tag_avg_fields
    count(columns: [question_tag_select_column!], distinct: Boolean): Int
    max: question_tag_max_fields
    min: question_tag_min_fields
    stddev: question_tag_stddev_fields
    stddev_pop: question_tag_stddev_pop_fields
    stddev_samp: question_tag_stddev_samp_fields
    sum: question_tag_sum_fields
    var_pop: question_tag_var_pop_fields
    var_samp: question_tag_var_samp_fields
    variance: question_tag_variance_fields
}

"aggregate avg on columns"
type question_tag_avg_fields {
    question_id: Float
    tag_id: Float
}

"aggregate max on columns"
type question_tag_max_fields {
    question_id: Int
    tag_id: Int
}

"aggregate min on columns"
type question_tag_min_fields {
    question_id: Int
    tag_id: Int
}

"response of any mutation on the table \"question_tag\""
type question_tag_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [question_tag!]!
}

"aggregate stddev on columns"
type question_tag_stddev_fields {
    question_id: Float
    tag_id: Float
}

"aggregate stddev_pop on columns"
type question_tag_stddev_pop_fields {
    question_id: Float
    tag_id: Float
}

"aggregate stddev_samp on columns"
type question_tag_stddev_samp_fields {
    question_id: Float
    tag_id: Float
}

"aggregate sum on columns"
type question_tag_sum_fields {
    question_id: Int
    tag_id: Int
}

"aggregate var_pop on columns"
type question_tag_var_pop_fields {
    question_id: Float
    tag_id: Float
}

"aggregate var_samp on columns"
type question_tag_var_samp_fields {
    question_id: Float
    tag_id: Float
}

"aggregate variance on columns"
type question_tag_variance_fields {
    question_id: Float
    tag_id: Float
}

"aggregate var_pop on columns"
type question_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type question_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type question_variance_fields {
    id: Float
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"question\""
    question(
        "distinct select on columns"
        distinct_on: [question_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_order_by!],
        "filter the rows returned"
        where: question_bool_exp
    ): [question!]!
    "fetch aggregated fields from the table: \"question\""
    question_aggregate(
        "distinct select on columns"
        distinct_on: [question_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_order_by!],
        "filter the rows returned"
        where: question_bool_exp
    ): question_aggregate!
    "fetch data from the table: \"question\" using primary key columns"
    question_by_pk(id: bigint!): question
    "fetch data from the table: \"question_tag\""
    question_tag(
        "distinct select on columns"
        distinct_on: [question_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_tag_order_by!],
        "filter the rows returned"
        where: question_tag_bool_exp
    ): [question_tag!]!
    "fetch aggregated fields from the table: \"question_tag\""
    question_tag_aggregate(
        "distinct select on columns"
        distinct_on: [question_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_tag_order_by!],
        "filter the rows returned"
        where: question_tag_bool_exp
    ): question_tag_aggregate!
    "fetch data from the table: \"question_tag\" using primary key columns"
    question_tag_by_pk(question_id: Int!, tag_id: Int!): question_tag
    "fetch data from the table: \"tag\""
    tag(
        "distinct select on columns"
        distinct_on: [tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [tag_order_by!],
        "filter the rows returned"
        where: tag_bool_exp
    ): [tag!]!
    "fetch aggregated fields from the table: \"tag\""
    tag_aggregate(
        "distinct select on columns"
        distinct_on: [tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [tag_order_by!],
        "filter the rows returned"
        where: tag_bool_exp
    ): tag_aggregate!
    "fetch data from the table: \"tag\" using primary key columns"
    tag_by_pk(id: Int!): tag
    "fetch data from the table: \"test\""
    test(
        "distinct select on columns"
        distinct_on: [test_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [test_order_by!],
        "filter the rows returned"
        where: test_bool_exp
    ): [test!]!
    "fetch aggregated fields from the table: \"test\""
    test_aggregate(
        "distinct select on columns"
        distinct_on: [test_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [test_order_by!],
        "filter the rows returned"
        where: test_bool_exp
    ): test_aggregate!
    "fetch data from the table: \"test\" using primary key columns"
    test_by_pk(id: Int!): test
    "fetch data from the table: \"user\""
    user(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
    "fetch aggregated fields from the table: \"user\""
    user_aggregate(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): user_aggregate!
    "fetch data from the table: \"user\" using primary key columns"
    user_by_pk(id: Int!): user
}

"columns and relationships of \"tag\""
type tag {
    id: Int!
    "An array relationship"
    question_tags(
        "distinct select on columns"
        distinct_on: [question_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_tag_order_by!],
        "filter the rows returned"
        where: question_tag_bool_exp
    ): [question_tag!]!
    "An aggregated array relationship"
    question_tags_aggregate(
        "distinct select on columns"
        distinct_on: [question_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [question_tag_order_by!],
        "filter the rows returned"
        where: question_tag_bool_exp
    ): question_tag_aggregate!
    tag_value: String
}

"aggregated selection of \"tag\""
type tag_aggregate {
    aggregate: tag_aggregate_fields
    nodes: [tag!]!
}

"aggregate fields of \"tag\""
type tag_aggregate_fields {
    avg: tag_avg_fields
    count(columns: [tag_select_column!], distinct: Boolean): Int
    max: tag_max_fields
    min: tag_min_fields
    stddev: tag_stddev_fields
    stddev_pop: tag_stddev_pop_fields
    stddev_samp: tag_stddev_samp_fields
    sum: tag_sum_fields
    var_pop: tag_var_pop_fields
    var_samp: tag_var_samp_fields
    variance: tag_variance_fields
}

"aggregate avg on columns"
type tag_avg_fields {
    id: Float
}

"aggregate max on columns"
type tag_max_fields {
    id: Int
    tag_value: String
}

"aggregate min on columns"
type tag_min_fields {
    id: Int
    tag_value: String
}

"response of any mutation on the table \"tag\""
type tag_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [tag!]!
}

"aggregate stddev on columns"
type tag_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type tag_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type tag_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type tag_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type tag_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type tag_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type tag_variance_fields {
    id: Float
}

"columns and relationships of \"test\""
type test {
    id: Int!
    name: String!
}

"aggregated selection of \"test\""
type test_aggregate {
    aggregate: test_aggregate_fields
    nodes: [test!]!
}

"aggregate fields of \"test\""
type test_aggregate_fields {
    avg: test_avg_fields
    count(columns: [test_select_column!], distinct: Boolean): Int
    max: test_max_fields
    min: test_min_fields
    stddev: test_stddev_fields
    stddev_pop: test_stddev_pop_fields
    stddev_samp: test_stddev_samp_fields
    sum: test_sum_fields
    var_pop: test_var_pop_fields
    var_samp: test_var_samp_fields
    variance: test_variance_fields
}

"aggregate avg on columns"
type test_avg_fields {
    id: Float
}

"aggregate max on columns"
type test_max_fields {
    id: Int
    name: String
}

"aggregate min on columns"
type test_min_fields {
    id: Int
    name: String
}

"response of any mutation on the table \"test\""
type test_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [test!]!
}

"aggregate stddev on columns"
type test_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type test_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type test_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type test_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type test_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type test_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type test_variance_fields {
    id: Float
}

"columns and relationships of \"user\""
type user {
    id: Int!
    name: String
}

"aggregated selection of \"user\""
type user_aggregate {
    aggregate: user_aggregate_fields
    nodes: [user!]!
}

"aggregate fields of \"user\""
type user_aggregate_fields {
    avg: user_avg_fields
    count(columns: [user_select_column!], distinct: Boolean): Int
    max: user_max_fields
    min: user_min_fields
    stddev: user_stddev_fields
    stddev_pop: user_stddev_pop_fields
    stddev_samp: user_stddev_samp_fields
    sum: user_sum_fields
    var_pop: user_var_pop_fields
    var_samp: user_var_samp_fields
    variance: user_variance_fields
}

"aggregate avg on columns"
type user_avg_fields {
    id: Float
}

"aggregate max on columns"
type user_max_fields {
    id: Int
    name: String
}

"aggregate min on columns"
type user_min_fields {
    id: Int
    name: String
}

"response of any mutation on the table \"user\""
type user_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [user!]!
}

"aggregate stddev on columns"
type user_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type user_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type user_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type user_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type user_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type user_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type user_variance_fields {
    id: Float
}

"column ordering options"
enum order_by {
    "in the ascending order, nulls last"
    asc
    "in the ascending order, nulls first"
    asc_nulls_first
    "in the ascending order, nulls last"
    asc_nulls_last
    "in the descending order, nulls first"
    desc
    "in the descending order, nulls first"
    desc_nulls_first
    "in the descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"question\""
enum question_constraint {
    "unique or primary key constraint"
    question_pkey
}

"select columns of table \"question\""
enum question_select_column {
    "column name"
    content
    "column name"
    id
    "column name"
    title
}

"unique or primary key constraints on table \"question_tag\""
enum question_tag_constraint {
    "unique or primary key constraint"
    question_tag_pkey
}

"select columns of table \"question_tag\""
enum question_tag_select_column {
    "column name"
    question_id
    "column name"
    tag_id
}

"update columns of table \"question_tag\""
enum question_tag_update_column {
    "column name"
    question_id
    "column name"
    tag_id
}

"update columns of table \"question\""
enum question_update_column {
    "column name"
    content
    "column name"
    id
    "column name"
    title
}

"unique or primary key constraints on table \"tag\""
enum tag_constraint {
    "unique or primary key constraint"
    tag_pkey
    "unique or primary key constraint"
    tag_tag_value_key
}

"select columns of table \"tag\""
enum tag_select_column {
    "column name"
    id
    "column name"
    tag_value
}

"update columns of table \"tag\""
enum tag_update_column {
    "column name"
    id
    "column name"
    tag_value
}

"unique or primary key constraints on table \"test\""
enum test_constraint {
    "unique or primary key constraint"
    test_pkey
}

"select columns of table \"test\""
enum test_select_column {
    "column name"
    id
    "column name"
    name
}

"update columns of table \"test\""
enum test_update_column {
    "column name"
    id
    "column name"
    name
}

"unique or primary key constraints on table \"user\""
enum user_constraint {
    "unique or primary key constraint"
    user_pkey
}

"select columns of table \"user\""
enum user_select_column {
    "column name"
    id
    "column name"
    name
}

"update columns of table \"user\""
enum user_update_column {
    "column name"
    id
    "column name"
    name
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"expression to compare columns of type bigint. All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"order by aggregate values of table \"question\""
input question_aggregate_order_by {
    avg: question_avg_order_by
    count: order_by
    max: question_max_order_by
    min: question_min_order_by
    stddev: question_stddev_order_by
    stddev_pop: question_stddev_pop_order_by
    stddev_samp: question_stddev_samp_order_by
    sum: question_sum_order_by
    var_pop: question_var_pop_order_by
    var_samp: question_var_samp_order_by
    variance: question_variance_order_by
}

"input type for inserting array relation for remote table \"question\""
input question_arr_rel_insert_input {
    data: [question_insert_input!]!
    on_conflict: question_on_conflict
}

"order by avg() on columns of table \"question\""
input question_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"question\". All fields are combined with a logical 'AND'."
input question_bool_exp {
    _and: [question_bool_exp]
    _not: question_bool_exp
    _or: [question_bool_exp]
    content: String_comparison_exp
    id: bigint_comparison_exp
    question_tags: question_tag_bool_exp
    title: String_comparison_exp
}

"input type for incrementing integer column in table \"question\""
input question_inc_input {
    id: bigint
}

"input type for inserting data into table \"question\""
input question_insert_input {
    content: String
    id: bigint
    question_tags: question_tag_arr_rel_insert_input
    title: String
}

"order by max() on columns of table \"question\""
input question_max_order_by {
    content: order_by
    id: order_by
    title: order_by
}

"order by min() on columns of table \"question\""
input question_min_order_by {
    content: order_by
    id: order_by
    title: order_by
}

"input type for inserting object relation for remote table \"question\""
input question_obj_rel_insert_input {
    data: question_insert_input!
    on_conflict: question_on_conflict
}

"on conflict condition type for table \"question\""
input question_on_conflict {
    constraint: question_constraint!
    update_columns: [question_update_column!]!
    where: question_bool_exp
}

"ordering options when selecting data from \"question\""
input question_order_by {
    content: order_by
    id: order_by
    question_tags_aggregate: question_tag_aggregate_order_by
    title: order_by
}

"primary key columns input for table: \"question\""
input question_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"question\""
input question_set_input {
    content: String
    id: bigint
    title: String
}

"order by stddev() on columns of table \"question\""
input question_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"question\""
input question_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"question\""
input question_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"question\""
input question_sum_order_by {
    id: order_by
}

"order by aggregate values of table \"question_tag\""
input question_tag_aggregate_order_by {
    avg: question_tag_avg_order_by
    count: order_by
    max: question_tag_max_order_by
    min: question_tag_min_order_by
    stddev: question_tag_stddev_order_by
    stddev_pop: question_tag_stddev_pop_order_by
    stddev_samp: question_tag_stddev_samp_order_by
    sum: question_tag_sum_order_by
    var_pop: question_tag_var_pop_order_by
    var_samp: question_tag_var_samp_order_by
    variance: question_tag_variance_order_by
}

"input type for inserting array relation for remote table \"question_tag\""
input question_tag_arr_rel_insert_input {
    data: [question_tag_insert_input!]!
    on_conflict: question_tag_on_conflict
}

"order by avg() on columns of table \"question_tag\""
input question_tag_avg_order_by {
    question_id: order_by
    tag_id: order_by
}

"Boolean expression to filter rows from the table \"question_tag\". All fields are combined with a logical 'AND'."
input question_tag_bool_exp {
    _and: [question_tag_bool_exp]
    _not: question_tag_bool_exp
    _or: [question_tag_bool_exp]
    question: question_bool_exp
    question_id: Int_comparison_exp
    tag: tag_bool_exp
    tag_id: Int_comparison_exp
}

"input type for incrementing integer column in table \"question_tag\""
input question_tag_inc_input {
    question_id: Int
    tag_id: Int
}

"input type for inserting data into table \"question_tag\""
input question_tag_insert_input {
    question: question_obj_rel_insert_input
    question_id: Int
    tag: tag_obj_rel_insert_input
    tag_id: Int
}

"order by max() on columns of table \"question_tag\""
input question_tag_max_order_by {
    question_id: order_by
    tag_id: order_by
}

"order by min() on columns of table \"question_tag\""
input question_tag_min_order_by {
    question_id: order_by
    tag_id: order_by
}

"input type for inserting object relation for remote table \"question_tag\""
input question_tag_obj_rel_insert_input {
    data: question_tag_insert_input!
    on_conflict: question_tag_on_conflict
}

"on conflict condition type for table \"question_tag\""
input question_tag_on_conflict {
    constraint: question_tag_constraint!
    update_columns: [question_tag_update_column!]!
    where: question_tag_bool_exp
}

"ordering options when selecting data from \"question_tag\""
input question_tag_order_by {
    question: question_order_by
    question_id: order_by
    tag: tag_order_by
    tag_id: order_by
}

"primary key columns input for table: \"question_tag\""
input question_tag_pk_columns_input {
    question_id: Int!
    tag_id: Int!
}

"input type for updating data in table \"question_tag\""
input question_tag_set_input {
    question_id: Int
    tag_id: Int
}

"order by stddev() on columns of table \"question_tag\""
input question_tag_stddev_order_by {
    question_id: order_by
    tag_id: order_by
}

"order by stddev_pop() on columns of table \"question_tag\""
input question_tag_stddev_pop_order_by {
    question_id: order_by
    tag_id: order_by
}

"order by stddev_samp() on columns of table \"question_tag\""
input question_tag_stddev_samp_order_by {
    question_id: order_by
    tag_id: order_by
}

"order by sum() on columns of table \"question_tag\""
input question_tag_sum_order_by {
    question_id: order_by
    tag_id: order_by
}

"order by var_pop() on columns of table \"question_tag\""
input question_tag_var_pop_order_by {
    question_id: order_by
    tag_id: order_by
}

"order by var_samp() on columns of table \"question_tag\""
input question_tag_var_samp_order_by {
    question_id: order_by
    tag_id: order_by
}

"order by variance() on columns of table \"question_tag\""
input question_tag_variance_order_by {
    question_id: order_by
    tag_id: order_by
}

"order by var_pop() on columns of table \"question\""
input question_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"question\""
input question_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"question\""
input question_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"tag\""
input tag_aggregate_order_by {
    avg: tag_avg_order_by
    count: order_by
    max: tag_max_order_by
    min: tag_min_order_by
    stddev: tag_stddev_order_by
    stddev_pop: tag_stddev_pop_order_by
    stddev_samp: tag_stddev_samp_order_by
    sum: tag_sum_order_by
    var_pop: tag_var_pop_order_by
    var_samp: tag_var_samp_order_by
    variance: tag_variance_order_by
}

"input type for inserting array relation for remote table \"tag\""
input tag_arr_rel_insert_input {
    data: [tag_insert_input!]!
    on_conflict: tag_on_conflict
}

"order by avg() on columns of table \"tag\""
input tag_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"tag\". All fields are combined with a logical 'AND'."
input tag_bool_exp {
    _and: [tag_bool_exp]
    _not: tag_bool_exp
    _or: [tag_bool_exp]
    id: Int_comparison_exp
    question_tags: question_tag_bool_exp
    tag_value: String_comparison_exp
}

"input type for incrementing integer column in table \"tag\""
input tag_inc_input {
    id: Int
}

"input type for inserting data into table \"tag\""
input tag_insert_input {
    id: Int
    question_tags: question_tag_arr_rel_insert_input
    tag_value: String
}

"order by max() on columns of table \"tag\""
input tag_max_order_by {
    id: order_by
    tag_value: order_by
}

"order by min() on columns of table \"tag\""
input tag_min_order_by {
    id: order_by
    tag_value: order_by
}

"input type for inserting object relation for remote table \"tag\""
input tag_obj_rel_insert_input {
    data: tag_insert_input!
    on_conflict: tag_on_conflict
}

"on conflict condition type for table \"tag\""
input tag_on_conflict {
    constraint: tag_constraint!
    update_columns: [tag_update_column!]!
    where: tag_bool_exp
}

"ordering options when selecting data from \"tag\""
input tag_order_by {
    id: order_by
    question_tags_aggregate: question_tag_aggregate_order_by
    tag_value: order_by
}

"primary key columns input for table: \"tag\""
input tag_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"tag\""
input tag_set_input {
    id: Int
    tag_value: String
}

"order by stddev() on columns of table \"tag\""
input tag_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"tag\""
input tag_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"tag\""
input tag_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"tag\""
input tag_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"tag\""
input tag_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"tag\""
input tag_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"tag\""
input tag_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"test\""
input test_aggregate_order_by {
    avg: test_avg_order_by
    count: order_by
    max: test_max_order_by
    min: test_min_order_by
    stddev: test_stddev_order_by
    stddev_pop: test_stddev_pop_order_by
    stddev_samp: test_stddev_samp_order_by
    sum: test_sum_order_by
    var_pop: test_var_pop_order_by
    var_samp: test_var_samp_order_by
    variance: test_variance_order_by
}

"input type for inserting array relation for remote table \"test\""
input test_arr_rel_insert_input {
    data: [test_insert_input!]!
    on_conflict: test_on_conflict
}

"order by avg() on columns of table \"test\""
input test_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"test\". All fields are combined with a logical 'AND'."
input test_bool_exp {
    _and: [test_bool_exp]
    _not: test_bool_exp
    _or: [test_bool_exp]
    id: Int_comparison_exp
    name: String_comparison_exp
}

"input type for incrementing integer column in table \"test\""
input test_inc_input {
    id: Int
}

"input type for inserting data into table \"test\""
input test_insert_input {
    id: Int
    name: String
}

"order by max() on columns of table \"test\""
input test_max_order_by {
    id: order_by
    name: order_by
}

"order by min() on columns of table \"test\""
input test_min_order_by {
    id: order_by
    name: order_by
}

"input type for inserting object relation for remote table \"test\""
input test_obj_rel_insert_input {
    data: test_insert_input!
    on_conflict: test_on_conflict
}

"on conflict condition type for table \"test\""
input test_on_conflict {
    constraint: test_constraint!
    update_columns: [test_update_column!]!
    where: test_bool_exp
}

"ordering options when selecting data from \"test\""
input test_order_by {
    id: order_by
    name: order_by
}

"primary key columns input for table: \"test\""
input test_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"test\""
input test_set_input {
    id: Int
    name: String
}

"order by stddev() on columns of table \"test\""
input test_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"test\""
input test_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"test\""
input test_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"test\""
input test_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"test\""
input test_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"test\""
input test_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"test\""
input test_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"user\""
input user_aggregate_order_by {
    avg: user_avg_order_by
    count: order_by
    max: user_max_order_by
    min: user_min_order_by
    stddev: user_stddev_order_by
    stddev_pop: user_stddev_pop_order_by
    stddev_samp: user_stddev_samp_order_by
    sum: user_sum_order_by
    var_pop: user_var_pop_order_by
    var_samp: user_var_samp_order_by
    variance: user_variance_order_by
}

"input type for inserting array relation for remote table \"user\""
input user_arr_rel_insert_input {
    data: [user_insert_input!]!
    on_conflict: user_on_conflict
}

"order by avg() on columns of table \"user\""
input user_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'."
input user_bool_exp {
    _and: [user_bool_exp]
    _not: user_bool_exp
    _or: [user_bool_exp]
    id: Int_comparison_exp
    name: String_comparison_exp
}

"input type for incrementing integer column in table \"user\""
input user_inc_input {
    id: Int
}

"input type for inserting data into table \"user\""
input user_insert_input {
    id: Int
    name: String
}

"order by max() on columns of table \"user\""
input user_max_order_by {
    id: order_by
    name: order_by
}

"order by min() on columns of table \"user\""
input user_min_order_by {
    id: order_by
    name: order_by
}

"input type for inserting object relation for remote table \"user\""
input user_obj_rel_insert_input {
    data: user_insert_input!
    on_conflict: user_on_conflict
}

"on conflict condition type for table \"user\""
input user_on_conflict {
    constraint: user_constraint!
    update_columns: [user_update_column!]!
    where: user_bool_exp
}

"ordering options when selecting data from \"user\""
input user_order_by {
    id: order_by
    name: order_by
}

"primary key columns input for table: \"user\""
input user_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"user\""
input user_set_input {
    id: Int
    name: String
}

"order by stddev() on columns of table \"user\""
input user_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"user\""
input user_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"user\""
input user_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"user\""
input user_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"user\""
input user_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"user\""
input user_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"user\""
input user_variance_order_by {
    id: order_by
}


scalar bigint